export declare const computeSize: (value: any) => string | null;
import type { BAvatarGroupParentData } from '../../types/components';
import { StyleValue } from 'vue';
import type { Booleanish, ColorVariant } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    alt: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        required: false;
    };
    badge: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    badgeLeft: {
        type: null;
        required: false;
        default: boolean;
    };
    badgeOffset: {
        type: StringConstructor;
        required: false;
    };
    badgeTop: {
        type: null;
        required: false;
        default: boolean;
    };
    badgeVariant: {
        type: null;
        required: false;
        default: string;
    };
    button: {
        type: null;
        required: false;
        default: boolean;
    };
    buttonType: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        required: false;
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: string;
    };
    size: {
        type: StringConstructor;
        required: false;
    };
    square: {
        type: null;
        required: false;
        default: boolean;
    };
    src: {
        type: StringConstructor;
        required: false;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    textVariant: {
        type: null;
        required: false;
        default: undefined;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}, {
    computeSize: (value: any) => string | null;
    props: {
        alt: string;
        ariaLabel?: string | undefined;
        badge: boolean | string;
        badgeLeft: Booleanish;
        badgeOffset?: string | undefined;
        badgeTop: Booleanish;
        badgeVariant: ColorVariant;
        button: Booleanish;
        buttonType: string;
        disabled: Booleanish;
        icon?: string | undefined;
        rounded: boolean | string;
        size?: string | undefined;
        square: Booleanish;
        src?: string | undefined;
        text?: string | undefined;
        textVariant: ColorVariant;
        variant: ColorVariant;
    };
    badgeLeftBoolean: import("vue").ComputedRef<boolean>;
    badgeTopBoolean: import("vue").ComputedRef<boolean>;
    buttonBoolean: import("vue").ComputedRef<boolean>;
    disabledBoolean: import("vue").ComputedRef<boolean>;
    squareBoolean: import("vue").ComputedRef<boolean>;
    emit: {
        (e: 'click', value: MouseEvent): void;
        (e: 'img-error', value: Event): void;
    };
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    SIZES: (string | null)[];
    FONT_SIZE_SCALE: number;
    BADGE_FONT_SIZE_SCALE: number;
    parentData: BAvatarGroupParentData | null;
    computeContrastVariant: (colorVariant: ColorVariant) => ColorVariant;
    hasDefaultSlot: import("vue").ComputedRef<boolean>;
    hasBadgeSlot: import("vue").ComputedRef<boolean>;
    showBadge: import("vue").ComputedRef<string | boolean>;
    computedSize: import("vue").ComputedRef<string | null>;
    computedVariant: import("vue").ComputedRef<ColorVariant>;
    computedRounded: import("vue").ComputedRef<string | boolean>;
    attrs: import("vue").ComputedRef<{
        'aria-label': string | null;
        disabled: true | null;
    }>;
    badgeClasses: import("vue").ComputedRef<{
        [x: string]: ColorVariant;
    }>;
    badgeText: import("vue").ComputedRef<string | false>;
    badgeTextClasses: import("vue").ComputedRef<string>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean | "" | ColorVariant | null | undefined;
        badge: boolean;
        rounded: boolean;
        "rounded-circle": boolean;
        "rounded-0": boolean;
        "rounded-1": boolean;
        "rounded-3": boolean;
        "rounded-top": boolean;
        "rounded-bottom": boolean;
        "rounded-start": boolean;
        "rounded-end": boolean;
        btn: boolean;
    }>;
    textClasses: import("vue").ComputedRef<string>;
    badgeStyle: import("vue").ComputedRef<StyleValue>;
    fontStyle: import("vue").ComputedRef<StyleValue>;
    marginStyle: import("vue").ComputedRef<{
        marginLeft: string;
        marginRight: string;
    } | {
        marginLeft?: undefined;
        marginRight?: undefined;
    }>;
    tag: import("vue").ComputedRef<string>;
    tagStyle: import("vue").ComputedRef<{
        width: string | null;
        height: string | null;
        marginLeft: string;
        marginRight: string;
    } | {
        width: string | null;
        height: string | null;
        marginLeft?: undefined;
        marginRight?: undefined;
    }>;
    clicked: (e: MouseEvent) => void;
    onImgError: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "img-error")[], "click" | "img-error", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    alt: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    ariaLabel: {
        type: StringConstructor;
        required: false;
    };
    badge: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    badgeLeft: {
        type: null;
        required: false;
        default: boolean;
    };
    badgeOffset: {
        type: StringConstructor;
        required: false;
    };
    badgeTop: {
        type: null;
        required: false;
        default: boolean;
    };
    badgeVariant: {
        type: null;
        required: false;
        default: string;
    };
    button: {
        type: null;
        required: false;
        default: boolean;
    };
    buttonType: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        required: false;
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: string;
    };
    size: {
        type: StringConstructor;
        required: false;
    };
    square: {
        type: null;
        required: false;
        default: boolean;
    };
    src: {
        type: StringConstructor;
        required: false;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    textVariant: {
        type: null;
        required: false;
        default: undefined;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onImg-error"?: ((...args: any[]) => any) | undefined;
}, {
    variant: any;
    button: any;
    alt: string;
    badge: string | boolean;
    badgeLeft: any;
    badgeTop: any;
    badgeVariant: any;
    buttonType: string;
    disabled: any;
    rounded: string | boolean;
    square: any;
    textVariant: any;
}>;
export default _sfc_main;
