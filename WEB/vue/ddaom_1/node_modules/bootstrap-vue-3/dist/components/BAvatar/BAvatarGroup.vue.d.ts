export declare const injectionKey: InjectionKey<BAvatarGroupParentData>;
import type { BAvatarGroupParentData } from '../../types/components';
import { InjectionKey, StyleValue } from 'vue';
import type { Booleanish, ColorVariant } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    overlap: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        required: false;
    };
    square: {
        type: null;
        required: false;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    variant: {
        type: null;
        required: false;
    };
}, {
    injectionKey: InjectionKey<BAvatarGroupParentData>;
    props: {
        overlap: number | string;
        rounded: boolean | string;
        size?: string | undefined;
        square: Booleanish;
        tag: string;
        variant?: ColorVariant | undefined;
    };
    squareBoolean: import("vue").ComputedRef<boolean>;
    computedSize: import("vue").ComputedRef<string | null>;
    computeOverlap: (value: any) => number;
    overlapScale: import("vue").ComputedRef<number>;
    paddingStyle: import("vue").ComputedRef<StyleValue>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    overlap: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    rounded: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        required: false;
    };
    square: {
        type: null;
        required: false;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    variant: {
        type: null;
        required: false;
    };
}>>, {
    tag: string;
    rounded: string | boolean;
    square: any;
    overlap: string | number;
}>;
export default _sfc_main;
