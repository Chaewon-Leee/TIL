import type { ColorVariant, TableField, TableItem, VerticalAlign } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    align: {
        type: null;
        required: false;
    };
    caption: {
        type: StringConstructor;
        required: false;
    };
    captionTop: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    borderless: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    borderVariant: {
        type: null;
        required: false;
    };
    dark: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    fields: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    footClone: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    hover: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    items: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    responsive: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    small: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
    };
}, {
    props: {
        align?: VerticalAlign | undefined;
        caption?: string | undefined;
        captionTop: boolean;
        borderless: boolean;
        bordered: boolean;
        borderVariant?: ColorVariant | undefined;
        dark: boolean;
        fields: Array<TableField>;
        footClone: boolean;
        hover: boolean;
        items: Array<TableItem>;
        responsive: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
        small: boolean;
        striped: boolean;
        variant?: ColorVariant | undefined;
    };
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean | ColorVariant | VerticalAlign | undefined;
        'table-striped': boolean;
        'table-hover': boolean;
        'table-dark': boolean;
        'table-bordered': boolean;
        'table-borderless': boolean;
        'table-sm': boolean;
        'caption-top': boolean;
    })[]>;
    itemHelper: {
        normaliseFields: (origFields: TableField<Record<string, unknown>>[], items: TableItem<Record<string, unknown>>[]) => import("../../types").TableFieldObject<Record<string, unknown>>[];
    };
    computedFields: import("vue").ComputedRef<import("../../types").TableFieldObject<Record<string, unknown>>[]>;
    responsiveClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
        'table-responsive': boolean;
    }[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: null;
        required: false;
    };
    caption: {
        type: StringConstructor;
        required: false;
    };
    captionTop: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    borderless: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    borderVariant: {
        type: null;
        required: false;
    };
    dark: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    fields: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    footClone: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    hover: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    items: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    responsive: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    small: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
    };
}>>, {
    small: boolean;
    dark: boolean;
    items: unknown[];
    hover: boolean;
    striped: boolean;
    bordered: boolean;
    borderless: boolean;
    captionTop: boolean;
    responsive: string | boolean;
    fields: unknown[];
    footClone: boolean;
}>;
export default _sfc_main;
