import type { ColorVariant } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    fixed: {
        type: StringConstructor;
        required: false;
    };
    print: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    sticky: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    toggleable: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    variant: {
        type: null;
        required: false;
    };
}, {
    props: {
        fixed?: string | undefined;
        print: boolean;
        sticky: boolean;
        tag: string;
        toggleable: false | 'sm' | 'md' | 'lg' | 'xl';
        type: string;
        variant?: ColorVariant | undefined;
    };
    computedRole: import("vue").ComputedRef<"navigation" | undefined>;
    computedNavbarExpand: import("vue").ComputedRef<string | undefined>;
    classes: import("vue").ComputedRef<{
        [x: string]: string | boolean | undefined;
        'd-print': boolean;
        'sticky-top': boolean;
        'navbar-expand': boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    fixed: {
        type: StringConstructor;
        required: false;
    };
    print: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    sticky: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    toggleable: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    variant: {
        type: null;
        required: false;
    };
}>>, {
    type: string;
    tag: string;
    sticky: boolean;
    print: boolean;
    toggleable: string | boolean;
}>;
export default _sfc_main;
